// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package biz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BIZClient is the client API for BIZ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BIZClient interface {
	Signal(ctx context.Context, opts ...grpc.CallOption) (BIZ_SignalClient, error)
}

type bIZClient struct {
	cc grpc.ClientConnInterface
}

func NewBIZClient(cc grpc.ClientConnInterface) BIZClient {
	return &bIZClient{cc}
}

func (c *bIZClient) Signal(ctx context.Context, opts ...grpc.CallOption) (BIZ_SignalClient, error) {
	stream, err := c.cc.NewStream(ctx, &BIZ_ServiceDesc.Streams[0], "/biz.BIZ/Signal", opts...)
	if err != nil {
		return nil, err
	}
	x := &bIZSignalClient{stream}
	return x, nil
}

type BIZ_SignalClient interface {
	Send(*Client) error
	Recv() (*Server, error)
	grpc.ClientStream
}

type bIZSignalClient struct {
	grpc.ClientStream
}

func (x *bIZSignalClient) Send(m *Client) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bIZSignalClient) Recv() (*Server, error) {
	m := new(Server)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BIZServer is the server API for BIZ service.
// All implementations must embed UnimplementedBIZServer
// for forward compatibility
type BIZServer interface {
	Signal(BIZ_SignalServer) error
	mustEmbedUnimplementedBIZServer()
}

// UnimplementedBIZServer must be embedded to have forward compatible implementations.
type UnimplementedBIZServer struct {
}

func (UnimplementedBIZServer) Signal(BIZ_SignalServer) error {
	return status.Errorf(codes.Unimplemented, "method Signal not implemented")
}
func (UnimplementedBIZServer) mustEmbedUnimplementedBIZServer() {}

// UnsafeBIZServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BIZServer will
// result in compilation errors.
type UnsafeBIZServer interface {
	mustEmbedUnimplementedBIZServer()
}

func RegisterBIZServer(s grpc.ServiceRegistrar, srv BIZServer) {
	s.RegisterService(&BIZ_ServiceDesc, srv)
}

func _BIZ_Signal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BIZServer).Signal(&bIZSignalServer{stream})
}

type BIZ_SignalServer interface {
	Send(*Server) error
	Recv() (*Client, error)
	grpc.ServerStream
}

type bIZSignalServer struct {
	grpc.ServerStream
}

func (x *bIZSignalServer) Send(m *Server) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bIZSignalServer) Recv() (*Client, error) {
	m := new(Client)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BIZ_ServiceDesc is the grpc.ServiceDesc for BIZ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BIZ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biz.BIZ",
	HandlerType: (*BIZServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Signal",
			Handler:       _BIZ_Signal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/grpc/biz/biz.proto",
}
